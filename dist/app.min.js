/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./javascripts/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./javascripts/app.js":
/*!****************************!*\
  !*** ./javascripts/app.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

// import React from "react";
// import ReactDOM from "react-dom";
// require('dotenv').config()
// var hoge = process.env;
// console.log(hoge);
mapboxgl.accessToken = "pk.eyJ1IjoiaGFuYW5pbmEiLCJhIjoiY2ticnlmdDBqMTE5YjJyczRvbXdnam12YyJ9.YOfgwy27DMF-84KQs0oXnQ";
var map = new mapboxgl.Map({
  container: 'map',
  // container id
  style: 'mapbox://styles/mapbox/streets-v11',
  center: [139.622, 35.71],
  // starting position
  zoom: 11 // starting zoom

});
var geocoder = new MapboxGeocoder({
  // Initialize the geocoder
  accessToken: mapboxgl.accessToken,
  // Set the access token
  mapboxgl: mapboxgl,
  // Set the mapbox-gl instance
  marker: true,
  // Do not use the default marker style
  autocomplete: true
}); // Add the geocoder to the map

document.getElementById('geocoder').appendChild(geocoder.onAdd(map)); // to add multiple markers

var geojson = {
  type: 'FeatureCollection',
  features: [{
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [139.6074332123044, 35.71350476083268]
    },
    properties: {
      title: 'Momoi Harappa Park',
      description: 'Doggy friendly Park'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [139.61963809323174, 35.70512308317922]
    },
    properties: {
      title: 'Ogikubo Town Seven',
      description: 'Super Market'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [139.62416119375848, 35.70145885190061]
    },
    properties: {
      title: 'Otaguro Park',
      description: 'Nice garden with a pond with Koi fish'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [139.62577914350413, 35.678119357542656]
    },
    properties: {
      title: 'Kashinomiya Park',
      description: 'Park with kids Play ground'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [139.61181128519627, 35.7272467271641]
    },
    properties: {
      title: 'Igusa no Mori Park',
      description: 'Another doggy friendly Park'
    }
  }]
}; // add markers to map

geojson.features.forEach(function (marker) {
  // create a HTML element for each feature
  var el = document.createElement('div');
  el.className = 'marker'; // make a marker for each feature and add to the map
  //popup

  new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).setPopup(new mapboxgl.Popup({
    offset: 25
  }) // add popups
  .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.description + '</p>')).addTo(map);
}); // sidebar

var sidebar = document.querySelector('[data-sidebar]');
var closeSidebar = document.querySelector('[data-close-sidebar]');
var openSidebar = document.querySelector('[data-open-sidebar]');
console.log(sidebar);
closeSidebar.addEventListener('click', function () {
  sidebar.classList.add('hide');
  openSidebar.classList.remove('hide');
  closeSidebar.classList.add('hide');
});
openSidebar.addEventListener('click', function () {
  sidebar.classList.remove('hide');
  openSidebar.classList.add('hide');
  closeSidebar.classList.remove('hide');
});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,